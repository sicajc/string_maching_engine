module SME(clk,reset,chardata,isstring,ispattern,valid,match,match_index);
input clk;
input reset;
input [7:0] chardata;
input isstring;
input ispattern;
output match;
output [4:0] match_index;
output valid;
// reg match;
// reg [4:0] match_index;
// reg valid;

parameter IDLE = 2'b00,STRING = 2'b01,PATTERN = 2'b10,MATCH = 2'b11;
parameter FIRSTWORD = 8'h5E , LASTWORD = 8'h24 , ANYWORD = 8'h2E , RW = 8'h2A;
reg [7:0] method;
reg [7:0] stringdata [31:0];
reg [7:0] stringaddr [31:0];
reg [7:0] patterndata [7:0];
reg [7:0] patternaddr [31:0];
reg [1:0]state,next_state;
reg [31:0]load_cnt;
reg match;
reg valid;




always@(posedge clk)begin
	if(reset)begin
		state <= IDLE;
		load_cnt <=0;
		match <= 0;valid <= 0;
	end
	else begin
		case(state)
		IDLE :begin
			load_cnt <=0;
			state <= STRING;
			end
		STRING :begin
			if(isstring)begin
				valid <= 0;
				load_cnt <= load_cnt + 1;
				end
			else begin
				load_cnt <= 0;
				state <= PATTERN;
				end
		end	
		PATTERN :begin
			if(ispattern)begin
				load_cnt <= load_cnt +1;
				valid <= 0;
				end
			else begin 
				load_cnt <= 0;
				state <= MATCH;
			end	
		end
		MATCH : begin
			if(isstring)
				state <= STRING;
			else if (ispattern)
				state <= PATTERN;
			else begin
				valid <= 1;
			end
		end
				
					
		endcase
	end
	$monitor($time," , load_cnt =%d, state = %d ",load_cnt,state);
end
		
always@(*) begin
	case(state)
	STRING: begin
		case(load_cnt)
			0 : stringdata[stringaddr[load_cnt]] = "chardata"; 
			1 : stringdata[30] = "chardata"; 
			2 : stringdata[29] = "chardata"; 
			3 : stringdata[28] = "chardata"; 
			4 : stringdata[27] = "chardata"; 
			5 : stringdata[26] = "chardata"; 
			6 : stringdata[25] = "chardata"; 
			7 : stringdata[24] = "chardata";
			8 : stringdata[23] = "chardata";
			9 : stringdata[22] = "chardata";
			10 : stringdata[21] = "chardata"; 
			11 : stringdata[20] = "chardata"; 
			12 : stringdata[19] = "chardata"; 
			13 : stringdata[18] = "chardata"; 
			14 : stringdata[17] = "chardata"; 
			15 : stringdata[16] = "chardata"; 
			16 : stringdata[15] = "chardata"; 
			17 : stringdata[14] = "chardata"; 
			18 : stringdata[13] = "chardata"; 
			19 : stringdata[12] = "chardata"; 
			20 : stringdata[11] = "chardata"; 
			21 : stringdata[10] = "chardata"; 
			22 : stringdata[9] = "chardata"; 
			23 : stringdata[8] = "chardata"; 
			24 : stringdata[7] = "chardata"; 
			25 : stringdata[6] = "chardata"; 
			26 : stringdata[5] = "chardata"; 
			27 : stringdata[4] = "chardata"; 
			28 : stringdata[3] = "chardata"; 
			29 : stringdata[2] = "chardata"; 
			30 : stringdata[1] = "chardata"; 
			31 : stringdata[0] = "chardata"; 
			
			
			
			endcase
			
		end
	PATTERN : begin
		case(load_cnt)
			0 : patterndata[7] = "chardata";
			1 : patterndata[6] = "chardata";
			2 : patterndata[5] = "chardata";
			3 : patterndata[4] = "chardata";
			4 : patterndata[3] = "chardata";
			5 : patterndata[2] = "chardata";
			6 : patterndata[1] = "chardata";
			7 : patterndata[0] = "chardata";
			endcase
		end	
	endcase
	MATCH : begin
		case(METHOD)
			FIRSTWORD:begin
				if(stringdata == patterndata)begin
					match = 1;
					valid = 1;
					end
				else if
					match = 0;
			end
			
			//LASTWORD:
			
			//ANYWORD:
			
			//W:
			
			
		
end

/*always@(negedge clk)begin
	if(isstring)
		max_string <= max_string + 1;
	else if(ispattern) 
		max_pattern <= max_pattern + 1;
	else begin
		max_string <= 0;
		max_pattern <= 0;
	end
	
	
end*/


			
	

endmodule


